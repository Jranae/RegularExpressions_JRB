import java.io.*;
import java.util.*;

/**
 * This class reads the output files generated by NovelProcessor, aggregates the counts
 * of each pattern across all novels, and prints the final count for each pattern.
 *
 * @author Jaleah Beason
 * @version 1.0
 * Assignment 4
 * CS322 - Compiler Construction
 * Spring 2024
 */
public class WordCounter {

    /**
     * Main method to run the program.
     *
     * @param args Command-line arguments (not used).
     */
    public static void main(String[] args) {
        countWords();
    }
    /**
     * Reads the output files generated by NovelProcessor, aggregates the counts of each
     * pattern across all novels, and prints the final count for each pattern.
     */
    public static void countWords() {
        HashMap<String, Integer> totalCounts = new HashMap<>();

        // Iterate through each output file
        for (String novel : getNovelNames()) {
            String fileName = novel + ".txt";
            try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    String pattern = parts[0];
                    int count = Integer.parseInt(parts[1]);
                    totalCounts.put(pattern, totalCounts.getOrDefault(pattern, 0) + count);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        // Print the final count for each pattern
        for (String pattern : totalCounts.keySet()) {
            System.out.println(pattern + ": " + totalCounts.get(pattern));
        }
    }

    /**
     * Returns an array of novel names to iterate over.
     *
     * @return An array of novel names.
     */
    private static String[] getNovelNames() {
        return new String[]{"frankenstein", "dracula", "jekyll_hyde", "dorian_gray", "turn_of_the_screw", "otranto"};
    }

}
